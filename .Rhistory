# Load function for posting GQL-queries and retrieving data:
source("functions/GQL_function.r")
configs <-
read_yaml("vegvesen_configs.yml")
gql_metadata_qry <- read_file("gql-queries/station_metadata.gql")
stations_metadata <-
GQL(
query=gql_metadata_qry,
.url = configs$vegvesen_url
)
```r
GQL(
vol_qry(
id=stations_metadata_df$id[1],
from=to_iso8601(stations_metadata_df$latestData[1],-4),
to=to_iso8601(stations_metadata_df$latestData[1],0)
),
.url = configs$vegvesen_url
)
constructed_query <- vol_qry(
id = stations_metadata_df$id[1],
from = to_iso8601(stations_metadata_df$latestData[1], -4),
to = to_iso8601(stations_metadata_df$latestData[1], 0)
)
# Print the constructed GraphQL query for debugging purposes
print(constructed_query)
# Make the GraphQL request using the loaded URL from vegvesen_config.yml
response <- GQL(
constructed_query,
.url = configs$url  # Assuming the URL key in vegvesen_config.yml is named 'url'
)
# Make the GraphQL request using the loaded URL from vegvesen_config.yml
response <- GQL(
constructed_query,
.url = configs$vegvesen_url  # Assuming the URL key in vegvesen_config.yml is named 'url'
)
# Print the response for further debugging
print(response)
GQL(
vol_qry(
id = stations_metadata_df$id[1],
from = to_iso8601(stations_metadata_df$latestData[1], -4),
to = to_iso8601(stations_metadata_df$latestData[1], 0)),
.url = configs$vegvesen_url
)
test_query <-  vol_qry(
id = stations_metadata_df$id[1],
from = to_iso8601(stations_metadata_df$latestData[1], -4),
to = to_iso8601(stations_metadata_df$latestData[1], 0))
print(test_query)
source("functions/data_transformations.r")
stations_metadata_df <-
stations_metadata %>%
transform_metadata_to_df(.)
source("functions/data_tests.r")
test_stations_metadata(stations_metadata_df)
source("gql-queries/vol_qry.r")
stations_metadata_df %>%
filter(latestData > Sys.Date() - days(7)) %>%
sample_n(1) %$%
vol_qry(
id = id,
from = to_iso8601(latestData, -4),
to = to_iso8601(latestData, 0)
) %>%
GQL(., .url = configs$vegvesen_url) %>%
transform_volumes() %>%
ggplot(aes(x=from, y=volume)) +
geom_line() +
theme_classic()
source("gql-queries/vol_qry.r")
print(test_query)
vol_qry(
id = stations_metadata_df$id[1],
from = to_iso8601(stations_metadata_df$latestData[1], -4),
to = to_iso8601(stations_metadata_df$latestData[1], 0))
transform_volumes <- function(json_response) {
# Parse the JSON response and extract relevant data
data <- jsonlite::fromJSON(json_response, flatten = TRUE)
# Extract necessary information and transform it into a data frame
volumes_df <- data$trafficData$volume$byHour$edges %>%
map_dfr(~{
node <- .x$node
tibble(
from = as.POSIXct(node$from),
to = as.POSIXct(node$to),
volume = node$total$volumeNumbers$volume
)
})
return(volumes_df)
}
source("gql-queries/vol_qry.r")
stations_metadata_df %>%
filter(latestData > Sys.Date() - days(7)) %>%
sample_n(1) %$%
vol_qry(
id = id,
from = to_iso8601(latestData, -4),
to = to_iso8601(latestData, 0)
) %>%
GQL(., .url = configs$vegvesen_url) %>%
transform_volumes() %>%
ggplot(aes(x=from, y=volume)) +
geom_line() +
theme_classic()
GQL(., .url = configs$vegvesen_url)
# Construct the GraphQL query
constructed_query <- stations_metadata_df %>%
filter(latestData > Sys.Date() - days(7)) %>%
sample_n(1) %$%
vol_qry(
id = id,
from = to_iso8601(latestData, -4),
to = to_iso8601(latestData, 0)
)
days
library(tidyverse)
# Construct the GraphQL query
constructed_query <- stations_metadata_df %>%
filter(latestData > Sys.Date() - days(7)) %>%
sample_n(1) %$%
vol_qry(
id = id,
from = to_iso8601(latestData, -4),
to = to_iso8601(latestData, 0)
)
# Construct the GraphQL query
constructed_query <- stations_metadata_df %>%
filter(latestData > Sys.Date() - days(7)) %>%
sample_n(1) %>%
vol_qry(
id = id,
from = to_iso8601(latestData, -4),
to = to_iso8601(latestData, 0)
)
# Print the constructed query for debugging
print(constructed_query)
# Send the GraphQL query to the API
response <- GQL(
constructed_query,
.url = configs$vegvesen_url  # Assuming the URL key in vegvesen_config.yml is named 'url'
)
# Print the response for further debugging
print(response)
vol_qry <- function(id, from, to) {
query <- glue::glue('
{{
trafficData(trafficRegistrationPointId: "{id}") {{
volume {{
byHour(from: "{from}", to: "{to}") {{
edges {{
node {{
from
to
total {{
volumeNumbers {{
volume
}}
}}
}}
}}
}}
}}
}}
}}
', id = id, from = from, to = to)
return(query)
}
GQL(
vol_qry(
id = stations_metadata_df$id[1],
from = to_iso8601(stations_metadata_df$latestData[1], -4),
to = to_iso8601(stations_metadata_df$latestData[1], 0)),
.url = configs$vegvesen_url
)
vol_qry(
id = stations_metadata_df$id[1],
from = to_iso8601(stations_metadata_df$latestData[1], -4),
to = to_iso8601(stations_metadata_df$latestData[1], 0))
# Construct the GraphQL query
constructed_query <- stations_metadata_df %>%
filter(latestData > Sys.Date() - days(7)) %>%
sample_n(1) %>%
vol_qry(
id = id,
from = to_iso8601(latestData, -4),
to = to_iso8601(latestData, 0)
)
# Print the constructed query for debugging
print(constructed_query)
# Send the GraphQL query to the API
response <- GQL(
constructed_query,
.url = configs$vegvesen_url  # Assuming the URL key in vegvesen_config.yml is named 'url'
)
# Print the response for further debugging
print(response)
vol_qry <- function(id, from, to) {
query <- glue::glue('
{{
trafficData(trafficRegistrationPointId: "{id}") {{
volume {{
byHour(from: "{from}", to: "{to}") {{
edges {{
node {{
from
to
total {{
volumeNumbers {{
volume
}}
}}
}}
}}
}}
}}
}}
}}
', id = id, from = from, to = to)
return(query)
}
vol_qry(
id = stations_metadata_df$id[1],
from = to_iso8601(stations_metadata_df$latestData[1], -4),
to = to_iso8601(stations_metadata_df$latestData[1], 0))
transform_volumes <- function(json_response) {
# Parse the JSON response and extract relevant data
data <- jsonlite::fromJSON(json_response, flatten = TRUE)
# Extract necessary information and transform it into a data frame
volumes_df <- data$trafficData$volume$byHour$edges %>%
map_dfr(~{
node <- .x$node
tibble(
from = as.POSIXct(node$from),
to = as.POSIXct(node$to),
volume = node$total$volumeNumbers$volume
)
})
return(volumes_df)
}
stations_metadata_df %>%
filter(latestData > Sys.Date() - days(7)) %>%
sample_n(1) %$%
vol_qry(
id = id,
from = to_iso8601(latestData, -4),
to = to_iso8601(latestData, 0)
) %>%
GQL(., .url = configs$vegvesen_url) %>%
transform_volumes() %>%
ggplot(aes(x=from, y=volume)) +
geom_line() +
theme_classic()
vol_qry <- function(id, from, to) {
query <- glue::glue('
{{
trafficData(trafficRegistrationPointId: "{id}") {{
volume {{
byHour(from: "{from}", to: "{to}") {{
edges {{
node {{
from
to
total {{
volumeNumbers {{
volume
}}
}}
}}
}}
}}
}}
}}
}}
', id = id, from = from, to = to)
return(query)
}
GQL(
vol_qry(
id = stations_metadata_df$id[1],
from = to_iso8601(stations_metadata_df$latestData[1], -4),
to = to_iso8601(stations_metadata_df$latestData[1], 0)),
.url = configs$vegvesen_url
)
vol_qry(
id = stations_metadata_df$id[1],
from = to_iso8601(stations_metadata_df$latestData[1], -4),
to = to_iso8601(stations_metadata_df$latestData[1], 0))
source("gql-queries/vol_qry.r")
stations_metadata_df %>%
filter(latestData > Sys.Date() - days(7)) %>%
sample_n(1) %$%
vol_qry(
id = id,
from = to_iso8601(latestData, -4),
to = to_iso8601(latestData, 0)
) %>%
GQL(., .url = configs$vegvesen_url) %>%
transform_volumes() %>%
ggplot(aes(x=from, y=volume)) +
geom_line() +
theme_classic()
GQL(
vol_qry(
id = stations_metadata_df$id[1],
from = to_iso8601(stations_metadata_df$latestData[1], -4),
to = to_iso8601(stations_metadata_df$latestData[1], 0)),
.url = configs$vegvesen_url[1]
)
vol_qry(
id = stations_metadata_df$id[1],
from = to_iso8601(stations_metadata_df$latestData[1], -4),
to = to_iso8601(stations_metadata_df$latestData[1], 0))
vol_qry <- function(id, from, to) {
query <- glue::glue('
{{
trafficData(trafficRegistrationPointId: "{id}") {{
volume {{
byHour(from: "{from}", to: "{to}") {{
edges {{
node {{
from
to
total {{
volumeNumbers {{
volume
}}
}}
}}
}}
}}
}}
}}
}}
', id = id, from = from, to = to)
return(query)
}
vol_qry(
id = stations_metadata_df$id[1],
from = to_iso8601(stations_metadata_df$latestData[1], -4),
to = to_iso8601(stations_metadata_df$latestData[1], 0))
source("gql-queries/vol_qry.r")
GQL(
vol_qry(
id = stations_metadata_df$id[1],
from = to_iso8601(stations_metadata_df$latestData[1], -4),
to = to_iso8601(stations_metadata_df$latestData[1], 0)),
.url = configs$vegvesen_url[1]
)
vol_qry(
id = stations_metadata_df$id[1],
from = to_iso8601(stations_metadata_df$latestData[1], -4),
to = to_iso8601(stations_metadata_df$latestData[1], 0))
GQL(
vol_qry(
id = stations_metadata_df$id[1],
from = to_iso8601(stations_metadata_df$latestData[1], -4),
to = to_iso8601(stations_metadata_df$latestData[1], 0)),
.url = configs$vegvesen_url[1]
)
vol_qry <- function(id, from, to) {
query <- glue::glue('
{{
trafficData(trafficRegistrationPointId: "{id}") {{
volume {{
byHour(from: {from}, to: {to}) {{
edges {{
node {{
from
to
total {{
volumeNumbers {{
volume
}}
}}
}}
}}
}}
}}
}}
}}
', id = id, from = from, to = to)
return(query)
}
vol_qry(
id = stations_metadata_df$id[1],
from = to_iso8601(stations_metadata_df$latestData[1], -4),
to = to_iso8601(stations_metadata_df$latestData[1], 0))
to_iso8601 <- function(datetime, offset_days) {
datetime_and_offset_days <- datetime + days(offset_days) # Adds offset_days
# to days in datetime
iso8601_format <- iso8601(datetime_and_offset_days) #Format the modified
# datetime to ISO8601-format
return(iso8601_format)
}
to_iso8601(as_datetime("2016-09-01 10:11:12"),-4)
to_iso8601 <- function(datetime, offset_days) {
datetime_and_offset_days <- datetime + days(offset_days) # Adds offset_days
# to days in datetime
iso8601_format <- iso8601(datetime_and_offset_days) #Format the modified
# datetime to ISO8601-format
return(iso8601_format)
}
to_iso8601 <- function(datetime, offset_days) {
datetime_and_offset_days <- datetime + days(offset_days)
iso8601_format <- format(datetime_and_offset_days, "%Y-%m-%dT%H:%M:%SZ", tz = "UTC")
return(iso8601_format)
}
to_iso8601(as_datetime("2016-09-01 10:11:12"),-4)
# Example usage
to_iso8601(as.POSIXct("2016-09-01 10:11:12"), -4)
to_iso8601 <- function(datetime, offset_days) {
iso8601_format <- iso8601(datetime + days(offset_days), tz = "UTC")
return(iso8601_format)
}
# Example usage
to_iso8601(as.POSIXct("2016-09-01 10:11:12", tz = "America/New_York"), -4)
# Example usage
to_iso8601(as.POSIXct("2016-09-01 10:11:12", tz = "UTC"), -4)
to_iso8601 <- function(datetime, offset_days) {
iso8601_format <- iso8601(datetime + days(offset_days), tz = "UTC")
return(iso8601_format)
}
# Example usage
to_iso8601(as.POSIXct("2016-09-01 10:11:12", tz = "UTC"), -4)
to_iso8601 <- function(datetime, offset_days) {
datetime_and_offset_days <- datetime + days(offset_days)
iso8601_format <- format(datetime_and_offset_days, "%Y-%m-%dT%H:%M:%SZ", tz = "UTC")
return(iso8601_format)
}
to_iso8601(as_datetime("2016-09-01 10:11:12"),-4)
to_iso8601 <- function(datetime, offset_days) {
datetime_and_offset_days <- datetime + days(offset_days) # Adds offset_days
# to days in datetime
iso8601_format <- iso8601(datetime_and_offset_days) #Format the modified
# datetime to ISO8601-format
return(iso8601_format)
}
to_iso8601(as_datetime("2016-09-01 10:11:12"),-4)
to_iso8601 <- function(datetime, offset_days) {
datetime_and_offset_days <- datetime + days(offset_days) # Adds offset_days
# to days in datetime
iso8601_format <- iso8601(datetime_and_offset_days), "Z" #Format the modified
to_iso8601 <- function(datetime, offset_days) {
datetime_and_offset_days <- datetime + days(offset_days) # Adds offset_days
# to days in datetime
iso8601_format <- iso8601(datetime_and_offset_days) + append("Z") #Format the modified
# datetime to ISO8601-format
return(iso8601_format)
}
to_iso8601(as_datetime("2016-09-01 10:11:12"),-4)
# datetime to ISO8601-format
return(iso8601_format)
to_iso8601 <- function(datetime, offset_days) {
datetime_and_offset_days <- datetime + days(offset_days) # Adds offset_days
# to days in datetime
iso8601_format <- iso8601(datetime_and_offset_days) + paste("Z") #Format the modified
# datetime to ISO8601-format
return(iso8601_format)
}
to_iso8601(as_datetime("2016-09-01 10:11:12"),-4)
to_iso8601 <- function(datetime, offset_days) {
datetime_and_offset_days <- datetime + days(offset_days) # Adds offset_days
# to days in datetime
iso8601_format <- paste(iso8601(datetime_and_offset_days), "Z")#Format the modified
# datetime to ISO8601-format
return(iso8601_format)
}
to_iso8601(as_datetime("2016-09-01 10:11:12"),-4)
to_iso8601 <- function(datetime, offset_days) {
datetime_and_offset_days <- datetime + days(offset_days) # Adds offset_days
# to days in datetime
iso8601_format <- paste(iso8601(datetime_and_offset_days),"Z")#Format the modified
# datetime to ISO8601-format
return(iso8601_format)
}
to_iso8601(as_datetime("2016-09-01 10:11:12"),-4)
vol_qry <- function(id, from, to) {
query <- glue::glue('
{{
trafficData(trafficRegistrationPointId: "{id}") {{
volume {{
byHour(from: {from}, to: {to}) {{
edges {{
node {{
from
to
total {{
volumeNumbers {{
volume
}}
}}
}}
}}
}}
}}
}}
}}
', id = id, from = from, to = to)
return(query)
}
GQL(
vol_qry(
id = stations_metadata_df$id[1],
from = to_iso8601(stations_metadata_df$latestData[1], -4),
to = to_iso8601(stations_metadata_df$latestData[1], 0)),
.url = configs$vegvesen_url[1]
)
vol_qry(
id = stations_metadata_df$id[1],
from = to_iso8601(stations_metadata_df$latestData[1], -4),
to = to_iso8601(stations_metadata_df$latestData[1], 0))
